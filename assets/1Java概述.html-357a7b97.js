import{_ as s,X as o,Y as t,$ as a,a0 as n,a1 as e,Z as l,F as r}from"./framework-4ca3085c.js";const u={},v=l('<h1 id="java概述" tabindex="-1"><a class="header-anchor" href="#java概述" aria-hidden="true">#</a> Java概述</h1><p>[TOC]</p><h2 id="_1-计算机语言" tabindex="-1"><a class="header-anchor" href="#_1-计算机语言" aria-hidden="true">#</a> 1.计算机语言</h2><h3 id="_1-1-什么是计算机语言" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是计算机语言" aria-hidden="true">#</a> 1.1 什么是计算机语言</h3><p>计算机语言（computer language）指用于人与计算机之间通讯的语言，是人与计算机之间传递信息的介质。而Java 是一种计算机编程语言，即通过编程（编写代码）的方式对计算机下达命令，以完成特定的功能。</p><h3 id="_1-2-计算机语言发展" tabindex="-1"><a class="header-anchor" href="#_1-2-计算机语言发展" aria-hidden="true">#</a> 1.2 计算机语言发展</h3><figure><img src="https://quokka-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230219220514958.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><strong>机器语言</strong>：用二进制代码（0/1）表示的语言，是计算机能直接识别的唯一语言，人类很难理解。</li><li><strong>汇编语言</strong>：用符号代替了机器语言的二进制码。虽然面向机器，但是缺乏通用性，程序不易移植。</li><li><strong>高级语言</strong>：一种接近于人们使用习惯的程序设计语言，如C++、C#、Java、Python等。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>汇编语言可以通过编译得到机器语言，机器语言也可以通过反编译得到汇编语言。</li><li>高级语言可以通过编译得到汇编语言、机器语言，但是汇编语言、机器语言几乎不可能还原成高级语言。</li></ul></div><h3 id="_1-3-计算机语言分类" tabindex="-1"><a class="header-anchor" href="#_1-3-计算机语言分类" aria-hidden="true">#</a> 1.3 计算机语言分类</h3><figure><img src="https://quokka-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230219223830062.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_2-java语言概述" tabindex="-1"><a class="header-anchor" href="#_2-java语言概述" aria-hidden="true">#</a> 2.Java语言概述</h2><h3 id="_2-1-java语言发展历史" tabindex="-1"><a class="header-anchor" href="#_2-1-java语言发展历史" aria-hidden="true">#</a> 2.1 Java语言发展历史</h3><p>Java 是一种高级编程语言，最初由 Sun Microsystems 在1991年开始开发。</p><ol><li>1991年：Java 的开发始于 Sun Microsystems的“<u>绿色计划</u>”中，该计划的目标是在家电、电视和其他消费电子设备中使用一种通用语言。</li><li>1995年：Java 1.0发布，成为第一个版本的 Java 语言，支持基本的<u>面向对象编程</u>，拥有一个简单的 AWT（Abstract Window Toolkit）GUI（Graphical User Interface）类库。</li><li>1996年：Java 1.1发布，引入<u>内部类</u>和 <u>JavaBeans</u> 等新功能。</li><li>1998年：Java 1.2发布，引入了 Java 语言<u>集合框架</u>，<u>Swing</u> GUI组件库，以及 <u>Java Native Interface</u>（JNI）技术。</li><li>2000年：Java 1.3发布，引入 Java 平台的 <u>HotSpot 虚拟机</u>，以及 <u>JavaSound API</u>。</li><li>2002年：Java 1.4发布，引入了新的 <u>JavaServer Pages（JSP）</u>技术和 <u>Java 2D API</u>。</li><li>2004年：Java 5.0发布，引入了新的语言特性，如<u>自动装箱和拆箱</u>，<u>枚举类型</u>，<u>泛型</u>和<u>注解</u>。</li><li>2006年：Java 6发布，引入了 <u>Java Database Connectivity（JDBC）</u>4.0，新的集成 <u>XML 解析器</u>和增强的 Java 编译器。</li><li>2011年：Java 7发布，引入了<u>动态语言</u>支持，以及新的<u>多语言虚拟机</u>支持。</li><li>2014年：Java 8发布，引入了 Java SE 8 新特性，包括 <u>Lambda 表达式</u>、<u>Streams API</u>和<u>新的 Date/Time API。</u></li><li>2017年：Java 9发布，引入了<u>模块化</u>系统，以及一些新的语言特性，如<u>私有接口方法</u>和 <u>JShell REPL</u>。</li><li>2018年：Java 10发布，引入了<u>局部变量类型推断</u>和其他语言特性。</li><li>2019年：Java 11发布，支持<u>长期支持（LTS）</u>，并引入了一些新特性，如<u>局部变量类型推断</u>和 <u>Java Flight Recorder</u>。</li><li>2021年：Java 16发布，引入了一些新的语言特性，如<u>记录类</u>和<u>模式匹配</u>，以及一些<u>增强的GC</u>（Garbage Collection）功能。</li></ol><p>Java 语言在过去几十年里一直在不断发展和更新，以满足不断变化的技术和市场需求。</p><h3 id="_2-2-java语言的特点" tabindex="-1"><a class="header-anchor" href="#_2-2-java语言的特点" aria-hidden="true">#</a> 2.2 Java语言的特点</h3><p>Java 是一种广泛使用的编程语言，它有以下几个特点：</p><ol><li><strong>简单易学</strong>：Java 语法比较简单，易于理解和学习。它采用了 C++ 语言的一些特性，如面向对象编程和基于类的继承，但摒弃了 C++ 的一些复杂特性，如指针。</li><li><strong>面向对象</strong>：Java 是一种面向对象的编程语言，具有<u>封装、继承和多态</u>等面向对象的特性。</li><li><strong>平台无关性</strong>：Java 代码可以在不同的操作系统平台上运行，例如 Windows、Linux、Mac OS 等，这是由于 <u>Java 虚拟机（JVM）</u>的存在。</li><li><strong>安全性</strong>：Java 具有内置的安全机制，可以防止恶意代码的攻击，从而保证程序的安全性。</li><li><strong>高性能</strong>：虽然 Java 程序需要<u>通过 JVM 解释运行</u>，但 Java 使用 Just-In-Time（JIT）编译器可以将代码编译成本地代码来提高运行速度。</li><li><strong>多线程支持</strong>：Java 内置了对多线程的支持，使得开发者可以方便地开发<u>并发</u>程序。</li><li><strong>开放性</strong>：Java 是一种开放性的语言，它的规范和实现都是开放的，这使得 Java 成为了一个广泛的生态系统，有很多<u>第三方库和工具</u>可以供开发者使用。</li></ol><p>总之，Java 语言是一种易于学习、安全、高性能、多平台支持、面向对象、多线程的编程语言，这些特点使得 Java 成为了一种广泛使用的编程语言。</p><h3 id="_2-3-java生态圈" tabindex="-1"><a class="header-anchor" href="#_2-3-java生态圈" aria-hidden="true">#</a> 2.3 Java生态圈</h3><p>Java 生态圈是由一系列 Java 平台和技术组成的生态系统，这些技术包括 Java 虚拟机、Java 编程语言、Java 开发工具和框架、Java Web 应用程序服务器和 Java 应用程序接口等。</p><p>Java 生态圈有以下几个方面：</p><ol><li><strong>Java 开发工具和框架</strong>：Java 开发工具和框架包括 Eclipse、NetBeans、IntelliJ IDEA、Maven、Gradle等，这些工具和框架可以帮助开发人员进行 Java 应用程序的开发和构建。</li><li><strong>Java Web应用程序服务器</strong>：Java Web应用程序服务器包括 Apache Tomcat、Jetty、JBoss等，这些服务器可以帮助开发人员构建Java Web应用程序。</li><li><strong>Java 应用程序接口</strong>：Java应用程序接口（API）包括Java数据库连接（JDBC）、JavaServer Pages（JSP）、Java Servlet等，这些API可以帮助开发人员构建各种Java应用程序。</li><li><strong>Java 虚拟机</strong>：Java虚拟机（JVM）是Java平台的核心组件，它负责<u>将Java字节码解释为本地机器指令，从而实现Java的跨平台特性</u>。</li><li><strong>开源社区</strong>：Java生态圈还有许多开源社区，例如Apache、Eclipse、Spring等，这些社区提供了各种开源项目和工具，帮助开发人员更加高效地开发Java应用程序。</li></ol><p>总之，Java 生态圈是一个庞大而广泛的生态系统，它为 Java 开发人员提供了各种工具、框架、API 和应用程序服务器等，帮助他们更加高效地进行 Java 应用程序开发。</p><h3 id="_2-4-java平台的三个版本" tabindex="-1"><a class="header-anchor" href="#_2-4-java平台的三个版本" aria-hidden="true">#</a> 2.4 Java平台的三个版本</h3><p>JavaSE、JavaEE、JavaME 是 Java 平台的三个不同的版本，它们之间的关系如下：</p><ol><li><strong>JavaSE（Java Standard Edition）</strong>：JavaSE是Java平台的<u>标准版</u>，也是Java语言的<u>核心部分</u>，提供了Java语言的<u>基本功能和库</u>，如Java核心类库、输入/输出、网络、多线程、图形用户界面等。<u>JavaSE提供了开发各种类型的Java应用程序的基本工具和API</u>。</li><li><strong>JavaEE（Java Enterprise Edition）</strong>：JavaEE是Java平台的<u>企业版</u>，是<u>基于JavaSE开发的一套企业级应用程序的规范和API集合</u>。JavaEE提供了一系列的标准组件，如<u>Java Servlet、JavaServer Pages、Enterprise JavaBeans等</u>，用于开发复杂的、大规模的、分布式的企业级应用程序。</li><li><strong>JavaME（Java Micro Edition）</strong>：JavaME是Java平台的<u>微型版</u>，是专门为<u>嵌入式设备和移动设备</u>提供的一套API和工具集。JavaME的特点是轻量级、资源占用少，支持移动设备和嵌入式设备上的应用程序开发。</li></ol><figure><img src="https://quokka-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230219230356845.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>因此，JavaSE、JavaEE和JavaME是三个不同的Java平台版本，它们之间的关系是：<u>JavaSE是JavaEE和JavaME的基础，JavaEE是建立在JavaSE之上，提供了一系列用于开发企业级应用程序的API，JavaME则是针对移动设备和嵌入式设备的轻量级版本。</u></p><h3 id="_2-5-java语言跨平台性" tabindex="-1"><a class="header-anchor" href="#_2-5-java语言跨平台性" aria-hidden="true">#</a> 2.5 Java语言跨平台性</h3><p>Java 语言实现跨平台性的核心是 Java 虚拟机（JVM）。Java 编译器将 Java 源代码编译成字节码，而不是机器代码，字节码是一种平台无关的中间代码，可以在任何支持 Java 虚拟机的计算机上运行。Java 虚拟机负责将字节码解释为本地机器指令，使得 Java 应用程序在不同的操作系统和硬件平台上都能够运行。</p><p>具体来说，Java 语言实现跨平台性的步骤如下：</p><ol><li>编写 Java 源代码，使用 Java 编译器将源代码编译为字节码文件（.class文件）。</li><li>在目标平台上安装 Java 虚拟机，Java 虚拟机是 Java 跨平台的关键。</li><li>在目标平台上运行 Java 应用程序，Java 虚拟机将字节码解释为本地机器指令，使得 Java 应用程序在目标平台上运行。</li></ol><figure><img src="https://quokka-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230219231252214.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>Java 虚拟机在不同的操作系统和硬件平台上都提供了相同的 API 和规范，这使得 Java 应用程序不需要考虑底层的操作系统和硬件平台差异，从而实现了跨平台性。</p><p>此外，Java 语言还有一些其他的跨平台技术，例如 Java Web 应用程序、Java Applet 和 Java Web Start 等，这些技术通过浏览器和网络来实现跨平台性，使得 Java 应用程序可以通过互联网在任何平台上运行。</p><h3 id="_2-6-jvm、jre、jdk关系" tabindex="-1"><a class="header-anchor" href="#_2-6-jvm、jre、jdk关系" aria-hidden="true">#</a> 2.6 JVM、JRE、JDK关系</h3><p>JVM（Java Virtual Machine）、JRE（Java Runtime Environment）和 JDK（Java Development Kit）是 Java 开发中非常重要的三个概念。</p><p>JVM 是 <u>Java 虚拟机</u>的缩写，是 Java 的核心，它是一个<u>虚拟计算机</u>，可以在不同的操作系统上运行 Java 程序。JVM 可以将 Java 源代码编译成字节码，然后解释执行字节码来运行 Java 程序。因此，Java 程序可以在不同的操作系统上运行，只需要安装对应的 JVM 即可。</p><p>JRE 是 <u>Java 运行时环境</u>的缩写，它<u>包含了 Java 虚拟机和 Java 核心类库</u>等必要的组件，用于运行 Java 程序。JRE 中包含了 JVM，因此可以理解为 JRE 是 JVM 的一个实现。<u>如果你只是需要运行 Java 程序，那么只需要安装 JRE 即可</u>。</p><p>JDK 是 <u>Java 开发工具包</u>的缩写，它是 Java 开发人员进行 Java 开发所必须的组件。<u>JDK 包括 JRE 和开发工具</u>，如编译器（javac）、调试器（jdb）、应用程序接口（API）文档生成器（javadoc）等工具。<u>如果你需要开发 Java 程序，那么必须安装 JDK</u>。</p><p>因此，JVM、JRE 和 JDK三者的关系可以总结为：</p><ul><li>JDK = JRE + 开发工具（编译器、调试器、API文档生成器等）</li><li>JRE = JVM + Java 核心类库</li><li>JVM = Java 虚拟机</li></ul><figure><img src="https://quokka-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230219231827713.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-hello-world" tabindex="-1"><a class="header-anchor" href="#_3-hello-world" aria-hidden="true">#</a> 3.Hello World</h2><p>要在本地运行Java的第一个“Hello World”程序，需要安装Java开发工具包（JDK）并按照以下步骤进行操作：</p>',47),J={class:"hint-container tip"},c=a("p",{class:"hint-container-title"},"提示",-1),d=a("p",null,"关于 JDK 的安装可参见下列文章：",-1),p={href:"https://blog.csdn.net/ly1347889755/article/details/127577660?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.runoob.com/java/java-environment-setup.html#linux-install",target:"_blank",rel:"noopener noreferrer"},h=l(`<ol><li><p>下载并安装 JDK（详见上）</p><p>在 Oracle 官网上下载适合您操作系统的 JDK，并按照安装程序的提示进行安装。安装完成后，您需要配置 JAVA_HOME 环境变量和 PATH 环境变量，以便在命令行中使用 Java。</p></li><li><p>创建Java源代码文件</p><p>使用任何文本编辑器（如Notepad++，Sublime Text，Atom等）创建一个新文件，将以下代码复制并粘贴到文件中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>保存源代码文件</p><p>将文件保存为 <code>HelloWorld.java</code>，确保文件名与类名一致，并且文件扩展名为 <code>.java</code>。</p></li><li><p>编译源代码</p><p>在命令行中切换到包含源代码文件的目录中，然后使用以下命令编译源代码：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>javac HelloWorld.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果没有错误，将生成一个名为 <code>HelloWorld.class</code> 的文件。</p></li><li><p>运行程序</p><p>在命令行中使用以下命令运行程序：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>java HelloWorld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果一切顺利，将在控制台上看到输出 <code>Hello, World!</code>。</p></li></ol><hr><p>下面是一些常见的问题：</p><ol><li><p><strong>字符编码问题</strong></p><p>当 cmd 命令行窗口的字符编码（Windows默认为 GBK）与 .java 源文件的字符编码不一致时便会出现乱码。此时可以在编译时指定源文件的字符编码，如：</p><div class="language-markdown line-numbers-mode" data-ext="md"><pre class="language-markdown"><code>javac -encoding utf-8 HelloWorld.java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果是 Notepad++等编辑器中，可以修改源文件的字符编码。</p></blockquote></li><li><p><strong>大小写问题</strong></p><ul><li>在 Windows 操作系统中 .java 的源文件名虽然不区分大小写，但建议大家养成区分大小写的习惯。</li><li>字节码文件名与类名严格区分大小写。</li><li>代码中严格区分大小写。</li></ul></li><li><p><strong>源文件名与类名一致问题</strong></p><ul><li>如果这个类不是 public 修饰，那么源文件名可以和类名不一致。（不推荐）</li><li>如果这个类是 public 修饰，那么要求源文件名必须与类名一致。（否则编译报错）</li><li>一个源文件中可以有多个类，编译后会生成多个 .class 字节码文件，但是一个源文件只能有一个 public 修饰的类。</li><li>main 方法并不是必须在 public 的类中，但是基本上 main 方法（主方法）习惯上都在 public 类中。</li></ul></li></ol>`,4);function m(b,_){const i=r("ExternalLinkIcon");return o(),t("div",null,[v,a("div",J,[c,d,a("ul",null,[a("li",null,[n("Mac："),a("a",p,[n("Mac M1安装JDK(避坑篇)"),e(i)])]),a("li",null,[n("Windows & Linux："),a("a",g,[n("Java 开发环境配置 | 菜鸟教程"),e(i)])])])]),h])}const E=s(u,[["render",m],["__file","1Java概述.html.vue"]]);export{E as default};
